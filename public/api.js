(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fs;



SupAPI.addPlugin('typescript', 'fLang', {
  code: "module fLang {\r\n  \r\n  interface Config {\r\n    locales: string[];\r\n    defaultLocale: string;\r\n    currentLocale: string;\r\n    searchInDefault: boolean;\r\n    replacementPattern: string;\r\n    cache: boolean;\r\n  }\r\n\r\n  var config: Config = {\r\n    locales: [\"en\"],\r\n    defaultLocale: \"en\",\r\n    currentLocale: \"en\",\r\n    searchInDefault: true,\r\n    replacementPattern: \"{{text}}\",\r\n    cache: true\r\n  };\r\n\r\n  var cache: { [key:string]: string } = {}; // the keys always begins by a locale name\r\n\r\n  var dictionariesByLocales: { [key:string]: Object } = { \"en\": {} };\r\n\r\n  function get( key: string, replacements?: { [key:string]: any } ): string {\r\n    var config = config;\r\n    var cacheLine = config.cache;\r\n    var locale = config.currentLocale;\r\n    var locKey = locale + \".\" + key;\r\n    var line = cache[ key ] || cache[ locKey ] || \"\";\r\n\r\n    if ( line === \"\" ) { \r\n      // the line wasn't found in the cache\r\n\r\n      var keyChunks = key.split( \".\" );\r\n      var noLocKey = key; // key without locale at the beginning\r\n\r\n      // override the current locale if the first part of the key is a locale ?\r\n      if ( config.locales.indexOf( keyChunks[0] ) !== -1 ) {\r\n        locale = keyChunks.splice( 0, 1 );\r\n        noLocKey = keyChunks.join( \".\" );\r\n      }\r\n\r\n      locKey = locale + noLocKey;\r\n      line = cache[ locKey ] || \"\";\r\n      \r\n      if ( line === \"\" ) {\r\n        // now we really need to retrieve a line from a dictionnary\r\n\r\n        // check if dictionary exists\r\n        var dico: any = dictionariesByLocales[ locale ]; // speicying the type any makes the compiler happy when writing \"line = dico;\" below\r\n        if ( dico === undefined ) {\r\n          var error = \"fLang.get(): Dictionary not found for locale '\"+locale+\"'.\";\r\n          console.error( error, key, dictionariesByLocales );\r\n          return error;\r\n        }\r\n\r\n        for ( var i = 0; i < keyChunks.length; i++ ) {\r\n          var _key = keyChunks[ i ];\r\n\r\n          if ( dico[ _key ] === undefined ) {\r\n            // _key was not found in this locale\r\n            // search for it in the default locale (maybe)\r\n            if ( config.searchInDefault === true && locale !== config.defaultLocale ) {\r\n              dico = get( config.defaultLocale + \".\" + noLocKey ); // do not pass replacements here\r\n            }\r\n            else {\r\n              // don't want to search in default locale, or already the default locale\r\n              cacheLine = false;\r\n              dico = \"Lang.get(): Key not found: '\" + key + \"'.\";\r\n              console.log( dico );\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n          dico = dico[ _key ];\r\n          // dico is now a nested table in the dictionary, or the searched string (or the keynotfound string)\r\n        }\r\n\r\n        line = dico;\r\n      }\r\n      else\r\n        cacheLine = false;\r\n    }\r\n    else\r\n      cacheLine = false; // no need to cache if the line already comes from it\r\n\r\n    var type = typeof( line )\r\n    if ( type !== \"string\" ) {\r\n      // test the type here to get a unified error message\r\n      // otherwise, caching, replacing and returning the non-string value should all throw a different error message\r\n      var error = \"fLang.get(): Provided key '\" + key + \"' does not lead to a string but to a value of type '\" + type + \"'.\"\r\n      console.log( error, line );\r\n      return error;\r\n    }\r\n\r\n    if ( cacheLine === true ) {\r\n      cache[ locKey ] = line;\r\n    }\r\n\r\n    // finally process replacements\r\n    if ( replacements !== undefined ) {\r\n      // ie: replacements = { theKeyToSearchFor: \"my new value\" }\r\n      for ( var replKey in replacements ) { // can't use var key, nor _key\r\n        line.replace(\r\n          config.replacementPattern.replace( \"text\", replKey ), // ie: replace \"{{text}}\" by \"{{theKeyToSearchFor}}\"\r\n          replacements[ replKey ] \r\n        ); // replace \"{{theKeyToSearchFor}}\" by \"my new value\" in the line\r\n      }\r\n    }\r\n\r\n    return line;\r\n  };\r\n}\r\n",
  defs: "declare module fLang {\r\n  interface Congig {\r\n    locales: string[];\r\n    defaultLocale: string;\r\n    currentLocale: string;\r\n    searchInDefault: boolean;\r\n    replacementPattern: string;\r\n    cache: boolean;\r\n  }\r\n  \r\n  var config: Config;\r\n  var dictionariesByLocales: { [key:string]: Object };\r\n\r\n  function get(key: string, replacements?: { [key:string]: string }): string;\r\n}\r\n"
});



},{}]},{},[1]);
