(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){


SupAPI.registerPlugin("typescript", "fLang", {
  code: "/// <reference path=\"../gitignore/EventEmitter.d.ts\" />\r\n\r\n/**\r\n* A module for simple and easy localization.\r\n*/\r\nmodule fLang {\r\n  \r\n  /**\r\n  * Interface for the `fLang.config` dictionary.\r\n  */\r\n  export interface Config {\r\n    /**\r\n    * The array that contains all of the locale (languages) names. Names must not contains dot and should be kept short, like \"en\" or \"fr\" for instance.<br>\r\n    * Default value is `[\"en\"]`.\r\n    */\r\n    locales: string[];\r\n    \r\n    /**\r\n    * The default locale name. <br>\r\n    * The default value is `\"en\"`.\r\n    */\r\n    defaultLocale: string;\r\n\r\n    /**\r\n    * The current locale name. <br>\r\n    * The default value is `\"en\"`.\r\n    */\r\n    currentLocale: string;\r\n    \r\n    /**\r\n    * Tell whether to search in the default locale when a key is not found in the current locale. <br>\r\n    * The default value is `true`.\r\n    */\r\n    searchInDefaultLocale: boolean;\r\n\r\n    /**\r\n    * The pattern (plain text, not regex) to recognize the placeholder texts to be replaced with values set in the `replacements` argument of `get()`. <br>\r\n    * The pattern must contain `\"placeholder\"` that is replaced by the keys set in the `replacements` argument. <br>\r\n    * The default value is `\"{{placeholder}}\"`.\r\n    */\r\n    replacementPattern: string;\r\n    \r\n    /**\r\n    * Tell whether to cache the keys searched for in the `fLang.cache` dictionary. <br>\r\n    * The default value is `true`.\r\n    */\r\n    cache: boolean;\r\n  }\r\n\r\n  /**\r\n  * The module's configuration. <br>\r\n  * See the `Config` interface for a description of each properties and their default values.\r\n  */\r\n  export var config: Config; // this two-step function is need for typedoc to consider config as a variable instead of an object literals\r\n  config = {\r\n    locales: [\"en\"],\r\n    defaultLocale: \"en\",\r\n    currentLocale: \"en\",\r\n    searchInDefaultLocale: true,\r\n    replacementPattern: \"{{placeholder}}\",\r\n    cache: true\r\n  };\r\n\r\n  /**\r\n  * The module's event emitter.\r\n  */\r\n  export var emitter = new window.EventEmitter();\r\n\r\n  /**\r\n  * A cache for the keys and their values. All keys contains the locale name as their first chunk. <br>\r\n  * The content is of type `{ [key:string]: string }`.\r\n  */\r\n  export var cache: any = {};\r\n\r\n  /**\r\n  * The container for the locale dictionaries. <br>\r\n  * The keys are the locale names as defined in the `fLang.config.locales` array. <br>\r\n  * The values are single or multilevel dictionaries in which all keys and values should be strings. <br>\r\n  * The content must be of type `{ [key:string]: Object }` and the default value is `{ en: {} }`.\r\n  */\r\n  export var dictionariesByLocale: any;\r\n  dictionariesByLocale = { en: {} };\r\n\r\n  /**\r\n  * Retrieve a localized string from its key in the current locale or the locale specified as first chunk of the key. <br>\r\n  * Optionally pass an object containing placeholders/replacements to replace in the retrieved string.\r\n  * @param key The key that identifies the localized string to retrieve. You may specify a locale as first chunk of it, the string will then be retrieved in this locale instead of the current locale.\r\n  * @param replacements The placeholders and their replacements.\r\n  * @returns The localized string in the current locale\r\n  */\r\n  export function get( key: string, replacements?: { [key:string]: any } ): string {\r\n    var cacheLine = config.cache;\r\n    var locale = config.currentLocale;\r\n    var locKey = locale + \".\" + key;\r\n    var line = cache[ key ] || cache[ locKey ] || \"\";\r\n\r\n    if ( line === \"\" ) { \r\n      // the line wasn't found in the cache\r\n\r\n      var keyChunks = key.split( \".\" );\r\n      var noLocKey = key; // key without locale at the beginning\r\n\r\n      // override the current locale if the first part of the key is a locale ?\r\n      if ( config.locales.indexOf( keyChunks[ 0 ] ) !== -1 ) {\r\n        locale = keyChunks.splice( 0, 1 )[ 0 ];\r\n        noLocKey = keyChunks.join( \".\" );\r\n      }\r\n\r\n      locKey = locale + \".\" + noLocKey;\r\n      line = cache[ locKey ] || \"\";\r\n      \r\n      if ( line === \"\" ) {\r\n        // now we really need to retrieve a line from a dictionnary\r\n\r\n        // check if dictionary exists\r\n        var dico: any = dictionariesByLocale[ locale ]; // speicying the type any makes the compiler happy when writing \"line = dico;\" below\r\n        if ( dico === undefined ) {\r\n          var error = \"fLang.get(): Dictionary not found for locale '\"+locale+\"'.\";\r\n          console.error( error, \"  Key:\", key, \"  Dictionaries:\", dictionariesByLocale );\r\n          return error;\r\n        }\r\n\r\n        for ( var i = 0; i < keyChunks.length; i++ ) {\r\n          var _key = keyChunks[ i ];\r\n\r\n          if ( dico[ _key ] === undefined ) {\r\n            // _key was not found in this locale\r\n            // search for it in the default locale (maybe)\r\n            if ( config.searchInDefaultLocale === true && locale !== config.defaultLocale ) {\r\n              dico = get( config.defaultLocale + \".\" + noLocKey ); // do not pass replacements here\r\n            }\r\n            else {\r\n              // don't want to search in default locale, or already the default locale\r\n              cacheLine = false;\r\n              dico = \"Lang.get(): Key not found: '\" + key + \"'.\";\r\n              console.warn( dico );\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n          dico = dico[ _key ];\r\n          // dico is now a nested table in the dictionary, or the searched string (or the keynotfound string)\r\n        }\r\n\r\n        line = dico;\r\n      }\r\n      else\r\n        cacheLine = false;\r\n    }\r\n    else\r\n      cacheLine = false; // no need to cache if the line already comes from it\r\n\r\n    var type = typeof( line )\r\n    if ( type !== \"string\" ) {\r\n      // test the type here to get a unified error message\r\n      // otherwise, caching, replacing and returning the non-string value should all throw a different error message\r\n      var error = \"fLang.get(): Provided key '\" + key + \"' does not lead to a string but to a value of type '\" + type + \"'.\"\r\n      console.error( error, \"  Value:\", line, \"  Dictionary:\", fLang.dictionariesByLocale[ locale ] );\r\n      return error;\r\n    }\r\n\r\n    if ( cacheLine === true ) {\r\n      cache[ locKey ] = line;\r\n    }\r\n\r\n    // finally process replacements\r\n    if ( replacements !== undefined ) {\r\n      // ie: replacements = { theKeyToSearchFor: \"my new value\" }\r\n      for ( var replKey in replacements ) { // can't use var key, nor _key\r\n        line = line.replace(\r\n          config.replacementPattern.replace( \"placeholder\", replKey ), // ie: replace \"{{placeholder}}\" by \"{{theKeyToSearchFor}}\"\r\n          replacements[ replKey ] \r\n        ); // replace \"{{theKeyToSearchFor}}\" by \"my new value\" in the line\r\n      }\r\n    }\r\n\r\n    return line;\r\n  };\r\n\r\n  /**\r\n  * Sets the new current locale and emit the `\"onUpdate\"` event, passing the new locale as first and only argument.\r\n  * @param newCurrentLocale The new current locale name (as set in the `fLang.config.locales` array).\r\n  */\r\n  export function update( newCurrentLocale: string ) {\r\n    if ( config.locales.indexOf( newCurrentLocale ) === -1 ) {\r\n      console.error( \"fLang.update(): Provided new current locale '\"+newCurrentLocale+\"' is not one of the registered locales.\", config.locales );\r\n      return;\r\n    }\r\n    config.currentLocale = newCurrentLocale;\r\n    emitter.emit( \"onUpdate\", newCurrentLocale );\r\n  }\r\n\r\n  /**\r\n  * Add or remove listeners functions for the `\"onUpdate\"` event.\r\n  * @param listener The listener function for the `\"onUpdate\"` event. The function receive the new current locale as its first and only argument.\r\n  * @param removeListener Tell whether you want to remove the provided listener from the listeners of the `\"onUpdate\"` event.\r\n  */\r\n  export function onUpdate( listener: (locale: string)=>void, removeListener: boolean = false ) {\r\n    if ( removeListener === true )\r\n      emitter.removeListener( \"onUpdate\", listener );\r\n    else\r\n      emitter.addListener( \"onUpdate\", listener );\r\n  }\r\n}\r\n".replace("reference path", "_reference path"),
  defs: "// fLang plugin\r\n// https://github.com/florentpoujol/superpowers-flang-plugin\r\n// Easy localization of any in-game strings.\r\n\r\n// Documentation:\r\n// http://florentpoujol.github.io/superpowers-flang-plugin\r\n\r\n// You can also access the documentation offline in the plugin's \"public/docs\" folder \r\n// or via the \"Docs browser\" tool provided by the \"Docs browser\" plugin: https://github.com/florentpoujol/superpowers-docs-browser-plugin\r\n\r\ndeclare module fLang {\r\n  interface Config {\r\n    locales: string[];\r\n    defaultLocale: string;\r\n    currentLocale: string;\r\n    searchInDefaultLocale: boolean;\r\n    replacementPattern: string;\r\n    cache: boolean;\r\n  }\r\n  \r\n  var config: Config;\r\n  var emitter: EventEmitter;\r\n  var cache: any; // { [key:string]: string }\r\n  var dictionariesByLocale: any; // { [key:string]: Object }\r\n  \r\n  function get(key: string, replacements?: { [key:string]: string }): string;\r\n  function update(newCurrentLocale: string);\r\n  function onUpdate(listener: (locale: string)=>void, removeListener?: boolean); // default = false\r\n}\r\n"
});

},{}]},{},[1]);
